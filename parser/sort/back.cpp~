#include <iostream>
#include <vector>
#include <string>
#include <set>
#include <queue>
using namespace std;

#define	INFINITE	1024
const int SIZE = 5; //number of nodes
int graph[SIZE][SIZE];//the graph itself
int d[SIZE]; //distances from the source to each node
int pi[SIZE];//contains the predecessor node for each node
vector<int> s;//list of nodes which were already visited
vector<int> vs;//list of nodes which were not visited yet
 
void sort(vector<int>* vec) {
    //sorts the vector of nodes according to 
    //distances from the source to each node
    for (unsigned int i = 0; i < vec->size(); i++)
        for (unsigned int j = i; j < vec->size(); j++)
            if (d[vec->at(i)] > d[vec->at(j)]) {
                int temp = vec->at(i);
                vec->at(i) = vec->at(j);
                vec->at(j) = temp;
            }
}
 
void relax(vector<int>* vec, int u) {
    //updates the distances from the source to each node
    //and the predecessor for each node
    for (unsigned int i = 0; i < vec->size(); i++) {
        int vi = vec->at(i);
        if (graph[u][vi] == INFINITE)
            continue;
        if (d[vi] > d[u] + graph[u][vi]) {
            d[vi] = d[u] + graph[u][vi];
            pi[vi] = u;
        }
    }
}

void printShortestPathTo(int v) {
    //this simply prints the vector of predecessors
    //for the requested node (v)
    cout << "Distance to " << v << " is " << d[v] << endl;
    cout << "Shortest path: ";
    int x = pi[v];
    while (x != -1) {
        cout << x << "<-";
        x = pi[x];
    }
    cout << endl << endl;
}
 
int main() {
    //initialize all the costs in the graph
    for (int i = 0; i < SIZE; i++)
        for (int j = 0; j < SIZE; j++)
            graph[i][j] = INFINITE;
 
    graph[0][1] = 20;
    graph[0][4] = 40;
    graph[1][4] = 50;
    graph[2][3] = 30;
    graph[2][4] = 60;
    graph[4][2] = 20;
    graph[4][3] = 100;
 
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            cout << graph[i][j] << "\t";
        }
        cout << endl;
    }
    for (int i = 0; i < SIZE; i++) {
        vs.push_back(i);//initialize all the variables
        d[i] = INFINITE;//all distances to infinite
        pi[i] = -1;//nodes have no predecesors 
    }
    d[0] = 0; //the distance of the source is 0
    sort(&vs); //we sort the nodes according to the distance
 
    while (vs.size() > 0) {
        int x = vs.front();//take the node with the shortest distance
        for (unsigned int i = 0; i < vs.size() - 1; i++) {
            vs.at(i) = vs.at(i + 1);
        }
        vs.pop_back();
        s.push_back(x);//mark it as visited
        relax(&vs, x);//update the distances
        sort(&vs); //sort the nodes according to the new distances
    }
 
    printShortestPathTo(4);//choose any node
    return 0;
}
